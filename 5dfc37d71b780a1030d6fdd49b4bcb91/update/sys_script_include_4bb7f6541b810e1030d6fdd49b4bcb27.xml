<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_snc_instanc_sync.JobRunner</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>JobRunner</name>
        <script><![CDATA[var JobRunner = Class.create();
JobRunner.prototype = {
	initialize: function () {
		this.iMaxRetryCount = Number(gs.getProperty('x_snc_instanc_sync.max.retry', 5));
		if (isNaN(this.iMaxRetryCount)) {
			this.iMaxRetryCount = 5;
		} // if max retry is not a number set default
		this._gt = new global.GlobalTools();
		this._gtArray = new global.GlobalToolsArray();
		this._gtObject = new global.GlobalToolsObject();
		this._gtTable = new global.GlobalToolsTable();
		this._gtRecordRead = new global.GlobalToolsRecordRead();
		this._gtRecordWriteValidate = new global.GlobalToolsRecordWriteValidate();
		this._gtAttachment = new global.GlobalToolsAttachment();
		this._gdDigest = new GlideDigest();
	}, // function initialize

	runTrigger: function (grJobLogTableChunk) {
		var dtNow = new GlideDateTime();
		var sChunkId = grJobLogTableChunk.getUniqueValue();
		grJobLogTableChunk.setValue('start_time', dtNow);
		var grJobLog = new GlideRecord('x_snc_instanc_sync_job_log');
		var grJobLogTable = new GlideRecord('x_snc_instanc_sync_job_log_table');
		if ((grJobLog.get(grJobLogTableChunk.getValue('job_log'))) && (grJobLogTable.get(grJobLogTableChunk.getValue('job_log_table')))) {
			var sTableId = grJobLogTable.getValue('table');
			var sTableName = (sTableId) ? String(grJobLogTable.table.name) : '';
			var grJobConfig = new GlideRecord('x_snc_instanc_sync_job_config');
			if ((grJobConfig.get(grJobLog.getValue('job_config'))) && (sTableName)) {
				var _gtRESTAPI = new global.GlobalToolsRESTAPI(grJobConfig.getValue('connection_credential_alias'));
				var _getJobCfg = new x_snc_json_cfg_mgr.getCfg(grJobConfig.getValue('json_configuration'));
				var oJobCfg = _getJobCfg.getConfig();
				var oTableCfg = {};
				var aHierarchy = this._gtTable.getTableHierarchy(sTableName);
				if (this._gtArray.isValidArray(aHierarchy)) {
					aHierarchy.some(function (sTableInHierarchy) {
						if (sTableInHierarchy != 'cmdb') {
							var _getTableCfg = new x_snc_json_cfg_mgr.getCfg(this._gtObject.getValue('job/sTableJSONPrefix', '', oJobCfg) + sTableInHierarchy);
							if (_getTableCfg) {
								oTableCfg = _getTableCfg.getConfig();
								if (oTableCfg.hasOwnProperty('config')) {
									return true;
								} // if valid obj
							} // if config
						} // if not cmdb root
					}, this); // each table in hierarchy
				} // if hierarchy
				var oJob = this._gtObject.deepMerge(this._gtObject.getValue('job', {}, oJobCfg), this._gtObject.getValue('job', {}, oTableCfg));
				var oConfig = this._gtObject.deepMerge(this._gtObject.getValue('config', {}, oJobCfg), this._gtObject.getValue('config', {}, oTableCfg),);
				//gs.info('tomtom oJob: ' + JSON.stringify(oJob) + ' oConfig: ' + JSON.stringify(oConfig));
				var bDeltaCompareAttachment = this._gtObject.getValue('bDeltaCompareAttachment', false, oJob);
				var aDeltaCompareRemoveFields = this._gtObject.getValue('aDeltaCompareRemoveFields', [], oJob);
				var iChunkSize = grJobLogTableChunk.getValue('chunksize');
				var sQuery = grJobLogTable.getValue('condition');
				var iOffset = grJobLogTableChunk.getValue('offset');
				var iSuccessRecordCount = 0;
				var iNoOpRecordCount = 0;
				var iErrorCount = 0;
				var iErrorCode = -103; // undefined error
				try {
					var aRecords = _gtRESTAPI.doNOWRESTQuery(sTableName, sQuery, iOffset, iChunkSize);
				} catch (oEx) {
					aRecords = '';
					if (String(oEx).indexOf('33554432') != -1) {
						iErrorCode = -105;
						gs.error('JobRunner.runTrigger sTableName: ' + sTableName + ' sChunkId: ' + sChunkId + ' iErrorCode: ' + iErrorCode + ' iChunkSize: ' + iChunkSize + ' iOffset: ' + iOffset + ' Error: ' + String(oEx));
					} else {
						iErrorCode = -104; // Undefined error during rest query
						gs.error('JobRunner.runTrigger sTableName: ' + sTableName + ' error in rest query: ' + String(oEx));
					} // if string to long
				} // if catch
				var sSysId = '', sName = '', sTargetId = '';
				if (this._gtArray.isValidArray(aRecords)) {
					aRecords.forEach(function (oRecord) {
						if (oRecord.hasOwnProperty('sys_id')) {
							var oError = {};
							var oRecordCompare = JSON.parse(JSON.stringify(oRecord));
							try {
								var sSysId = this._gtObject.getValue('sys_id', '', oRecord);
								var sClassName = this._gtObject.getValue('sys_class_name', '', oRecord);
								this._gtObject.setValue('sTargetTable', sClassName, oConfig);
								if (this._gtArray.isValidArray(aDeltaCompareRemoveFields)) {
									aDeltaCompareRemoveFields.forEach(function (sDeltaCompareRemoveField) {
										delete oRecordCompare[sDeltaCompareRemoveField];
									}); // each remove delta field
								} // if delta compare remove field
								var bChangeDetected = false;
								if (bDeltaCompareAttachment) {
									var sCIBOOSTHash = '';
									var grSIMCIAttachment = this._gtRecordRead.getRecord('sys_attachment', 'table_name=ZZ_YY' + sClassName + '^table_sys_id=' + sSysId + '^file_name=sim_' + sSysId + '.json');
									if (grSIMCIAttachment) {
										sCIBOOSTHash = grSIMCIAttachment.getValue('hash');
									} // if attachment
									var sCISIMHash = String(this._gdDigest.getSHA256Hex(JSON.stringify(oRecordCompare))).toLocaleLowerCase();
									if (sCISIMHash != sCIBOOSTHash) {
										bChangeDetected = true;
									} // if hash is not same
								} else {
									var grBOOSTRecord = this._gtRecordRead.getRecord(sClassName, 'sys_id=' + sSysId);
									if (grBOOSTRecord) {
										var oBOOSTRecord = this._gtRecordRead.convertGRtoJSON(grBOOSTRecord);
										if (this._gtArray.isValidArray(aDeltaCompareRemoveFields)) {
											aDeltaCompareRemoveFields.forEach(function (sDeltaCompareRemoveField) {
												delete oBOOSTRecord[sDeltaCompareRemoveField];
											}); // each remove delta field
										} // if delta compare remove field
										gs.info('tomtom No Change isEqual: ' + this._gt.isEqual(oRecordCompare, oBOOSTRecord) + ' oRecordCompare: ' + JSON.stringify(oRecordCompare) + ' oBOOSTRecord: ' + JSON.stringify(oBOOSTRecord));
										if (!this._gt.isEqual(oRecordCompare, oBOOSTRecord)) {
											bChangeDetected = true;
										} // if not equal
									} // if attachment
								} // if compare attachment
								if (bChangeDetected === true) {
									var sResultId = this._gtRecordWriteValidate.validateAndWrite(oConfig, oRecord, oError);
									gs.info('tomtom Change sSysId: ' + sSysId + ' sResultId: ' + sResultId + ' oError: ' + JSON.stringify(oError));
									if (bDeltaCompareAttachment) {
										this._gtAttachment.deleteAttachment(sClassName, sSysId, 'sim_' + sSysId + '.json', true);
										this._gtAttachment.writeAttachmentByTableId(sClassName, sSysId, 'sim_' + sSysId + '.json', JSON.stringify(oRecordCompare), 'json', false, true);
									} // if compare attachment
								} // if diff
								/*
								if ((oError.hasOwnProperty('code')) && (oError['code'] == '000')) {
									iNoOpRecordCount++;
								} else if (sTargetId) {
									iSuccessRecordCount++;
								} else {
									iErrorCount++;
									sName = (oRecord.hasOwnProperty('number')) ? oRecord['number'] : '';
									sName = (!sName) && (oRecord.hasOwnProperty('name')) ? oRecord['name'] : '';
									if (oError.hasOwnProperty('code')) {
										gs.error('JobRunner.runTrigger sTableName: ' + sTableName + ' sSysId: ' + sSysId + ' error writing record: ' + JSON.stringify(oError));
										this._writeRecordError(sTableId, sSysId, sName, Number(oError['code']), oError['message'], grJobLogTableChunk);
									} else {
										gs.error('JobRunner.runTrigger sTableName: ' + sTableName + ' sSysId: ' + sSysId + ' error writing record: No Error Details! aRecords: ' + aRecords.length);
										this._writeRecordError(sTableId, sSysId, sName, -99, 'No error details', grJobLogTableChunk);
									} // if error code
								} // if success
								*/
							} catch (oEx) {
								iErrorCount++;
								//gs.error('JobRunner.runTrigger sTableName: ' + sTableName + ' error writing record: ' + String(oEx));
								this._writeRecordError(sTableId, sSysId, '', -97, String(oEx), grJobLogTableChunk);
							} // if catch
						} else {
							iErrorCount++;
							//gs.error('JobRunner.runTrigger sTableName: ' + sTableName + ' sSysId: empty oRecord: ' + JSON.stringify(oRecord));
							this._writeRecordError(sTableId, '', '', -98, 'No SysId in Payload', grJobLogTableChunk);
						} // if no sys id
					}, this); // each record
					grJobLogTableChunk.setValue('successful_record_count', iSuccessRecordCount);
					grJobLogTableChunk.setValue('no_operation_count', iNoOpRecordCount);
					grJobLogTableChunk.setValue('error_count', iErrorCount);
					grJobLogTableChunk.setValue('status', 'completed');
					grJobLogTableChunk.setValue('error_code', 0);
				} else if (iErrorCode == -105) {
					grJobLogTableChunk.setValue('status', 'pending_retry');
					grJobLogTableChunk.setValue('error_code', -105); // error string size to big
				} else {
					var iCurrentRetryCount = Number(grJobLogTableChunk.getValue('retry_count')) + 1;
					var sStatus = (iCurrentRetryCount < this.iMaxRetryCount) ? 'pending_retry' : 'failed';
					if ((aRecords) && (typeof aRecords == 'object') && (aRecords.hasOwnProperty('error_code'))) {
						iErrorCode = aRecords['error_code'];
					} // if has error code
					grJobLogTableChunk.setValue('status', sStatus);
					grJobLogTableChunk.setValue('retry_count', iCurrentRetryCount);
					grJobLogTableChunk.setValue('error_code', iErrorCode); // error no records
				} // if records
			} else {
				grJobLogTableChunk.setValue('status', 'failed');
				grJobLogTableChunk.setValue('error_code', -101); // error loading copy job config or table name empty
			} // if no config
		} else {
			grJobLogTableChunk.setValue('status', 'failed');
			grJobLogTableChunk.setValue('error_code', -100); // error loading copy job table or copy job
		} // if copy job table
		dtNow = new GlideDateTime();
		grJobLogTableChunk.setValue('end_time', dtNow);
		//if (!grJobLogTableChunk.update()) {
		//	gs.error('JobRunner.runTrigger error writing chunk record: ' + sChunkId + ' Error: ' + grJobLogTableChunk.getLastErrorMessage());
		//} // if error
	}, // function runTrigger

	_writeRecordError: function (sTableId, sRecordSysId, sRecordName, sErrorCode, sErrorMessage, grJobLogTableChunk) {
		gs.info('tomtom sTableId: ' + sTableId + ' sRecordSysId: ' + sRecordSysId + ' sRecordName: ' + sRecordName + ' sErrorCode: ' + sErrorCode + ' sErrorMessage: ' + sErrorMessage);
		/*
		var grError = new GlideRecord('x_snc_instanc_sync_job_error');
		grError.setValue('copy_job_log', grJobLogTableChunk.getValue('copy_job_log'));
		grError.setValue('copy_job_log_table', grJobLogTableChunk.getValue('copy_job_log_table'));
		grError.setValue('copy_job_log_table_chunk', grJobLogTableChunk.getUniqueValue());
		grError.setValue('table', sTableId);
		grError.setValue('remote_record_sysid', sRecordSysId);
		grError.setValue('remote_record_display_name', sRecordName);
		grError.setValue('error_code', sErrorCode);
		grError.setValue('error_message', sErrorMessage);
		grError.insert();
		*/
	}, // function _writeRecordError

	/*
	_doAttachment: function (sTargetTableName, sTargetId, oConfig, iOffset, _ConnectionHandler) {
		var sQuery = '', sTableName = '';
		iOffset = (iOffset) ? iOffset : 0;
		if (sTargetTableName == 'sys_attachment_doc') {
			sTableName = 'sys_attachment_doc';
			sQuery = 'sys_attachment=' + sTargetId;
		} else {
			sTableName = 'sys_attachment';
			sQuery = 'table_sys_id=' + sTargetId + '^table_name=' + sTargetTableName;
		} // if docs
		oConfig['sTargetTable'] = sTableName;
		var aRecords = _ConnectionHandler.doRESTQuery(sTableName, sQuery, iOffset, 10000);
		var sSysId = '', oError = {};
		if ((aRecords) && (Array.isArray(aRecords)) && (aRecords.length > 0)) {
			aRecords.forEach(function (oRecord) {
				if (oRecord.hasOwnProperty('sys_id')) {
					sTargetId = this._NOWCOTools.doRecord(oRecord, oConfig, oError);
					if ((sTableName == 'sys_attachment') && ((sTargetId))) {
						this._doAttachment('sys_attachment_doc', sTargetId, oConfig, 0, _ConnectionHandler);
					} // if attachment
				} // if sysid
			}, this); // each record
		} // if records
	}, // function _doAttachment
	*/

	type: 'JobRunner',
	version: '1.0.0',
	author: 'ServiceNow Customer Outcomes, Tom Hauri',
	email: 'tom@hauri.biz',
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>tom.hauri</sys_created_by>
        <sys_created_on>2024-03-16 05:32:21</sys_created_on>
        <sys_id>4bb7f6541b810e1030d6fdd49b4bcb27</sys_id>
        <sys_mod_count>45</sys_mod_count>
        <sys_name>JobRunner</sys_name>
        <sys_package display_value="Instance Sync" source="x_snc_instanc_sync">5dfc37d71b780a1030d6fdd49b4bcb91</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Instance Sync">5dfc37d71b780a1030d6fdd49b4bcb91</sys_scope>
        <sys_update_name>sys_script_include_4bb7f6541b810e1030d6fdd49b4bcb27</sys_update_name>
        <sys_updated_by>tom.hauri</sys_updated_by>
        <sys_updated_on>2024-03-20 13:01:07</sys_updated_on>
    </sys_script_include>
</record_update>
